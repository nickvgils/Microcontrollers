
Timer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000919  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000861  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c5  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007641  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a6  00000000  00000000  00008efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00008fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000022e  00000000  00000000  00008fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__vector_9>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	37 d0       	rcall	.+110    	; 0x108 <main>
  9a:	3f c0       	rjmp	.+126    	; 0x11a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_9>:
#include <avr/interrupt.h>



ISR( TIMER2_COMP_vect )
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24

	PORTD ^= BIT(7); // Toggle bit 0 van PORTC
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	80 58       	subi	r24, 0x80	; 128
  ae:	82 bb       	out	0x12, r24	; 18

	if(PORTD == 0){
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	81 11       	cpse	r24, r1
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__vector_9+0x20>
		TCNT2 = 0;
  b6:	14 bc       	out	0x24, r1	; 36
		OCR2 = 195.3;
  b8:	83 ec       	ldi	r24, 0xC3	; 195
  ba:	83 bd       	out	0x23, r24	; 35
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <__vector_9+0x26>
	}else{
		TCNT2 = 0;
  be:	14 bc       	out	0x24, r1	; 36
		OCR2 = 117;
  c0:	85 e7       	ldi	r24, 0x75	; 117
  c2:	83 bd       	out	0x23, r24	; 35
	}

}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  d0:	18 16       	cp	r1, r24
  d2:	19 06       	cpc	r1, r25
  d4:	6c f4       	brge	.+26     	; 0xf0 <wait+0x20>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef ec       	ldi	r30, 0xCF	; 207
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <wait+0xe>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <wait+0x14>
  e4:	00 00       	nop
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	82 17       	cp	r24, r18
  ec:	93 07       	cpc	r25, r19
  ee:	a9 f7       	brne	.-22     	; 0xda <wait+0xa>
  f0:	08 95       	ret

000000f2 <timer2Init>:
	}
}

void timer2Init( void )
{
	OCR2 = 117; // Compare value of counter 2
  f2:	85 e7       	ldi	r24, 0x75	; 117
  f4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= BIT(7); // T2 compare match interrupt enable
  f6:	87 b7       	in	r24, 0x37	; 55
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	87 bf       	out	0x37, r24	; 55
	SREG |= BIT(7); // turn_on intr all
  fc:	8f b7       	in	r24, 0x3f	; 63
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0b00001101; // Initialize T2: timer, prescaler=32,
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	85 bd       	out	0x25, r24	; 37
 106:	08 95       	ret

00000108 <main>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	DDRD = 0xFF; // set PORTC for output (toggle PC0)
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	81 bb       	out	0x11, r24	; 17
	PORTD = BIT(7);
 10c:	80 e8       	ldi	r24, 0x80	; 128
	timer2Init();
 10e:	82 bb       	out	0x12, r24	; 18
	while (1)
	{
		// do something else
		wait(10); // every 10 ms (busy waiting
 110:	f0 df       	rcall	.-32     	; 0xf2 <timer2Init>
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	dc df       	rcall	.-72     	; 0xd0 <wait>
 118:	fc cf       	rjmp	.-8      	; 0x112 <main+0xa>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
